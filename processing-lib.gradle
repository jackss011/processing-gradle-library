apply plugin: ProcessingLibrary
apply plugin: 'java'

import java.nio.charset.Charset;
import java.nio.file.Files;
import java.io.FileInputStream;
import groovy.json.*


class ExampleTask extends DefaultTask
{
  def example
}


/** This class reprents the user-configuration json file, it contains the selected example path
*   and the processing installation dir.
*   The file is parsed once in the constructor.
*   Exception are thrown if the processing dir is not defined or the json contains errors. */
class UserFile
{
  def project;
  File userFile;
  def userObject;

  UserFile(project, boolean create = false)
  {
    assert project
    this.project = project

    userFile = project.file(ProcessingLibrary.USER_FILE_NAME)
    if(!userFile.exists())
    {
      if(create)
      {
        println "Creating user file..."
        userFile.createNewFile()
        userFile.write '{}'
      }
      else
        throw new GradleException("User file doesn't exists")
    }

    try
      { userObject = new JsonSlurper().parse(userFile) }
    catch(Exception e)
      { throw new GradleException("Error during ${userFile.getName()} parsing") }
  }

  File getSelectedExample()
  {
    return userObject.selected ? project.file(userObject.selected) : null
  }

  void selectExample(File exampleFolder)
  {
    assert exampleFolder
    userObject.put("selected", exampleFolder.getAbsolutePath())
    userFile.write new JsonBuilder(userObject).toPrettyString()
  }

  String getProcessingDir()
  {
    if(userObject.processing)
      return userObject.processing
    else
      throw new GradleException("Processing directory undefined")
  }
}


// Plugin class
class ProcessingLibrary implements Plugin<Project>
{
  // some standard processing libarary dirs
  private String SRC_DIR        = '/src/'
  private String EXAMPLE_DIR    = '/examples/'
  private String LIBRARY_DIR    = '/library/'
  private String BUILD_DIR      = '/build/'
  private String COMPILE_DIR    =  "$BUILD_DIR/compile/"
  private String CORE_DIR       = '/core/library/core.jar'

  private String TASK_GROUP = 'processing'
  private static final String USER_FILE_NAME = 'lib-user.json'

  UserFile userFile

  // get an array of every folder in example dir
  ArrayList<File> getExampleFolders(project)
  {
    assert project
    def folders = new ArrayList<File>()

    project.fileTree(EXAMPLE_DIR).include('**/*.pde').each {
      if ("${it.getParentFile().getName()}.pde" == it.getName())  // only if the folder and the inner .pde have the same name
        folders.add(it.getParentFile())
    }
    return folders
  }

  // create tasks
  void apply(Project project)
  {
    userFile = new UserFile(project, true)

    // TASK: compile .class files into build/compile folder
    project.task('compile', type: JavaCompile) {
      group TASK_GROUP
      description 'compile the library into class files'

      options.fork = true
      classpath = project.files(userFile.getProcessingDir() + CORE_DIR)
      source = project.fileTree(SRC_DIR)
      destinationDir = project.file(COMPILE_DIR)
    }

    // TASK: package .class into a Jar
    project.task('package', type: Jar, dependsOn: 'compile') {
      group TASK_GROUP
      description 'package the library into a jar'

      from project.files(COMPILE_DIR)
      destinationDir = project.file(LIBRARY_DIR)
      archiveName = "${project.name}.jar"
    }

    // TASK: open selected example
    project.task('open', type: Exec) {
      group TASK_GROUP
      description 'open the selected example'

      doFirst {
        File exampleFolder = userFile.getSelectedExample()
        if(!exampleFolder) throw new GradleException('No selected exampple')

        workingDir exampleFolder.getAbsolutePath()
        commandLine 'cmd', "/c", exampleFolder.getName() + '.pde'  //TODO: this works only in widows
      }
    }

    // TASK: print a list of all examples in example folder
    project.task('examples') {
      group TASK_GROUP
      description 'print the list of the examples'

      doLast {
        println ''
        getExampleFolders(project).each { println it.getName() }
        println ''
      }
    }

    // TASKS: create a task for each example folder
    getExampleFolders(project).each { sketchFolder ->
      project.task(sketchFolder.getName(), type: ExampleTask) {
        group TASK_GROUP
        example sketchFolder

        doLast {
          println "Using as stored example: ${example.getName()}"
          userFile.selectExample sketchFolder
        }
      }
    }

    // TASK: run selected example
    project.task('run', type: Exec, dependsOn: 'package') {
      group TASK_GROUP
      description 'run the current stored example'

      doFirst {
        File exampleFolder = userFile.getSelectedExample()
        if(!exampleFolder)
          throw new GradleException('No selected exampple')

        Separator.make 'from the skecth'

        workingDir userFile.getProcessingDir()
        executable 'processing-java'
        args "--sketch=${exampleFolder.getAbsolutePath()}", '--run'
      }

      doLast { Separator.make 'finished' }
    }
  }
}

// Build a line separtor. ex ------- str ----------
class Separator
{
  static void make(String str)
  {
    final line = '-' * 10
    println "\u001B[32m $line $str $line \u001B[0m"
  }
}
