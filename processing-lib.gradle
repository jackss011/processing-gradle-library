apply plugin: ProcessingLibrary
apply plugin: 'java'

import java.nio.charset.Charset;
import java.nio.file.Files;
import java.io.FileInputStream;

import groovy.json.*

// basic class for example tasks (which store an example). example is the example to store
class ExampleTask extends DefaultTask
{
  def example
}

class UserFile
{
  def project;
  File userFile;
  def userObject;

  UserFile(project, boolean create = false)
  {
    assert project
    this.project = project

    userFile = project.file(ProcessingLibrary.USER_FILE_NAME)
    if(!userFile.exists())
    {
      if(create)
      {
        println "Creating new file..."
        userFile.createNewFile()
        userFile.withWriter {out -> out.println '{}'}
      }
      else
        throw new GradleException("User file doesn't exists")
    }

    userObject = new JsonSlurper().parse(userFile)
  }

  File getSelectedExample()
  {
    return project.file(userObject.selected)
  }

  void selectExample(File exampleFolder)
  {
    assert exampleFolder

    userObject.put("selected", exampleFolder.getAbsolutePath())
    userFile.withWriter {out -> out.println JsonOutput.toJson(userObject)}
  }

  String getProcessingDir()
  {
    if(userObject.processing)
      return userObject.processing
    else
      throw new GradleException("Processing directory undefined")
  }

  static def make(project, create = false) { return new UserFile(project, create) }
}


class ProcessingLibrary implements Plugin<Project>
{
  // some standard processing libarary dirs
  private String SRC_DIR = '/src/'
  private String EXAMPLE_DIR = '/examples/'
  private String LIBRARY_DIR = '/library/'

  private static final String USER_FILE_NAME = 'lib-user.json'

  // customizable dirs
  private String BUILD_DIR = '/build/'
  private String CLASSES_DIR = BUILD_DIR + '/classes/'
  private String CORE_DIR = '/core/library/core.jar'

  // group names
  private String taskGroup = 'processing'
  private String taskGroupExamples = 'examples'

  void apply(Project project)
  {
    // see function description
    createExampleTasks(project)

    // TASK: package .class into a Jar
    project.task('packJar', type: Jar, dependsOn: 'compileLib') {
      group taskGroup
      description 'create the jar for the library'

      destinationDir = project.file(LIBRARY_DIR)
      archiveName = project.name + '.jar'
      from project.files(CLASSES_DIR)
    }

    // TASK: create folders for the project
    project.task('libInit') {
      group taskGroup
      description 'create basic folders'

      doLast {
        project.mkdir "$SRC_DIR/${project.name}"  // this is the package
        project.mkdir EXAMPLE_DIR
        project.mkdir LIBRARY_DIR
      }
    }

    // TASK: open stored example
    project.task('open', type: Exec) {
      group taskGroup
      description 'open the current stored example'

      doFirst {
        File folder = getStoredExample(project)
        if(folder)
        {
          workingDir folder.getAbsolutePath()
          commandLine 'cmd', "/c", folder.getName() + '.pde'  //TODO: this works only in widows
        }
        else
          throw new GradleException("No ")
      }
    }

    // TASK: print a list of all available examples
    project.task('examples') {
      group taskGroup
      description 'print a list of all available examples'

      doLast {
        println ''
        getExampleFolders(project).each { println it.getName() }
        println ''
      }
    }

    project.afterEvaluate
    {
      // TASK: compile .class files into build/classes folder
      //       wait for the project to evaluate, so the user can define the extension 'processing'
      project.task('compileLib', type: JavaCompile) {
        group taskGroup
        description 'compile the library. You don\'t need to use this'

        options.fork = true
        source = project.fileTree(SRC_DIR)

        classpath = project.files(project.processing.directory + CORE_DIR)
        destinationDir = project.file(CLASSES_DIR)
      }

      // TASK: run stored example
      project.task('run', type: Exec, dependsOn: 'packJar') {
        group taskGroup
        description 'run the current stored example'

        doFirst {
          File folder = getStoredExample(project)
          if(folder != null)
          {
            println()
            this.printSeparator("From the sketch")

            workingDir project.processing.directory
            executable 'processing-java'
            args "--sketch=${folder.getAbsolutePath()}", '--run'
          }
          else {
            logger.error 'No stored example'
            throw new StopExecutionException()
          }
        }

        doLast{ printSeparator('Finished') }
      }

    }
  }



  // ****** Exaples ***********
  /*
  * manage examples for this library
  * creates a task for each example sketch found in 'examples' folder
  * examples must be a .pde, inside a folder named as the .pde
  *
  */

  void createExampleTasks(project)
  {
    // for each .pde in the examples folder
    getExampleFolders(project).each { sketchFolder -> createExampleTask(project, sketchFolder) }
  }

  // TASK: create a task for each sketch folder, when such a task is executed it stores
  //        its file path is stored in the file store
  void createExampleTask(project, File sketchFolder)
  {
    Task t = project.task(sketchFolder.getName(), type: ExampleTask) {
      group taskGroupExamples
      description 'use this task to store the corrisponding example. Then run or open it'
      example sketchFolder

      doLast {
        storeExample(example, project)
        println "Using as stored example: ${example.getName()}"
      }
    }
    //t.example = sketchFolder
  }

  ArrayList<File> getExampleFolders(project)
  {
    assert project

    ArrayList<File> set = new ArrayList();
    project.fileTree(EXAMPLE_DIR).include('**/*.pde').each {
      // only if the outer folder is equal to the .pde name
      if (it.getParentFile().getName() + '.pde' == it.getName())
      {
        set.add(it.getParentFile())
      }
      else println "skipped: ${it.getAbsolutePath()}"
    }
    return set
  }

  static void printSeparator(String str)
  {
    def line = '-' * 10
    println "\u001B[32m $line $str $line \u001B[0m"
  }
}
